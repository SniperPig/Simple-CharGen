{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Character Generation server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Swagger Character Generation",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost",
  "basePath": "/Simple-CharGen/api",
  "tags": [
    {
      "name": "Character generator",
      "description": "Everything about your characters ",
      "externalDocs": {
        "description": "(/? mandatory for each link bellow)",
        "url": "http://localhost"
      }
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/charactergenerator": {
      "post": {
        "tags": [
          "Character generator"
        ],
        "summary": "generates a character",
        "description": "",
        "operationId": "createCharacter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "The LicenseKey of the client trying to generate a character",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CharacterGeneration"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/charactersaving": {
      "post": {
        "tags": [
          "Character generator"
        ],
        "summary": "Add a new character to the database",
        "description": "",
        "operationId": "addCharacter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Character that needs to be added to the store",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        }
      },
      "put": {
        "tags": [
          "Character generator"
        ],
        "summary": "Update an existing Character",
        "description": "",
        "operationId": "updateCharacter",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Character object that needs to be added to the db",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Character"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Character not found"
          },
          "405": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/charactersaving&token={token}&id={id}": {
      "get": {
        "tags": [
          "Character generator"
        ],
        "summary": "Finds character by D",
        "description": "Multiple Id values can be provided with comma separated strings",
        "operationId": "findCharactersByID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token of the user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the character that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GetCharacterResponse"
              }
            }
          },
          "400": {
            "description": "Invalid values"
          }
        }
      },
      "delete": {
        "tags": [
          "Character generator"
        ],
        "summary": "Delete character by ID",
        "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
        "operationId": "delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "The token of the user",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "id",
            "in": "path",
            "description": "ID of the character that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "character not found"
          }
        }
      }
    }
  },
  "definitions": {
    "Character": {
      "type": "object",
      "properties": {
        "LicenseKey": {
          "type": "integer",
          "format": "int64"
        },
        "Character": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fName": {
                "type": "string"
              },
              "lName": {
                "type": "string"
              },
              "species": {
                "type": "string"
              },
              "eyeColor": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "age": {
                "type": "string"
              },
              "dateOfBirth": {
                "type": "string"
              },
              "info": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "CharacterGeneration": {
      "type": "object",
      "properties": {
        "LicenseKey": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "GetCharacterResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        },
        "Character": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "fName": {
                "type": "string"
              },
              "lName": {
                "type": "string"
              },
              "species": {
                "type": "string"
              },
              "eyeColor": {
                "type": "string"
              },
              "height": {
                "type": "string"
              },
              "age": {
                "type": "string"
              },
              "dateOfBirth": {
                "type": "string"
              },
              "info": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "time": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}